// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  viewed    Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id])
  Sender    User     @relation("Sender", fields: [sendTo], references: [id])
  userId    Int
  sendTo    Int
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  postId    Int
}



model Post {
  id        Int       @id @default(autoincrement())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User      @relation(fields: [userId], references: [id])
  userId    Int
  Likes     Like[] // Post has many likes
  Comment   Comment[] // post has many comments

  @@index([userId], name: "userId")
}

model Request {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [senderId], references: [id])
  Sender     User     @relation("Sender", fields: [recieverId], references: [id])
  senderId   Int
  recieverId Int
}

model Like {
  id        Int      @id @default(autoincrement())
  Post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  LikedBy   User     @relation("LikedBy", fields: [likedById], references: [id])
  likedById Int
  createdAt DateTime @default(now())

  @@index([postId], name: "postId")
  @@index([likedById], name: "likedById")
}

model User {
  id           Int      @id @default(autoincrement())
  bgImage      String?
  avatar       String?
  firstName    String
  lastName     String
  birthday     DateTime @default(now())
  email        String
  password     String
  connected    Boolean  @default(false)
  userFunction String?
  description  String?
  address      String?
  country      String?
  phone        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  url          String?

  // Define relationships
  Post             Post[]
  Comment          Comment[]
  MessagesSent     Message[] @relation("Sender")
  MessagesReceived Message[]
  RequestsSent     Request[] @relation("Sender")
  RequestsReceived Request[]
  LikedBy          Like[]    @relation("LikedBy")

  userFriends       Friends[] @relation(name: "users")
  friendUserFriends Friends[] @relation(name: "friend_users")
  tags              Tag[]
}

model Friends {
  id        Int      @id @default(autoincrement())
  user      User     @relation(name: "users", fields: [user_id], references: [id])
  user_id   Int
  friend    User     @relation(name: "friend_users", fields: [friend_id], references: [id])
  friend_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([user_id, friend_id])
}

model Tag {
  id     Int    @id @default(autoincrement())
  name   String
  User   User?  @relation(fields: [userId], references: [id])
  userId Int?
}
